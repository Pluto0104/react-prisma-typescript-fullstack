useNode: &useNode
  docker:
    - image: circleci/node:lts

useGcloud: &useGcloud
  docker:
    - image: google/cloud-sdk

useFirebase: &useFirebase
  docker:
    - image: devillex/docker-firebase

version: 2.1
jobs:
  install:
    <<: *useNode
    steps:
      - checkout
      - run:
          name: Export Environement variables
          command: |-
            export BRANCH_NAME_UPPERCASE=$(echo "${CIRCLE_BRANCH}" | tr a-z A-Z)
            export BACKEND_ENV=$(if [ "$BRANCH_NAME_UPPERCASE" != "PREPROD" ]; then echo "$(eval echo \"\$BACKEND_ENV_${BRANCH_NAME_UPPERCASE}\")"; else echo "${BACKEND_ENV_PROD}"; fi)
            export FRONTEND_ENV=$(if [ "$BRANCH_NAME_UPPERCASE" != "PREPROD" ]; then echo "$(eval echo \"\$FRONTEND_ENV_${BRANCH_NAME_UPPERCASE}\")"; else echo "${FRONTEND_ENV_PROD}"; fi)
            echo "$BRANCH_NAME_UPPERCASE"
            echo "$BACKEND_ENV"
      - run:
          name: Import Backend ENV
          command: echo "$BACKEND_ENV" | base64 --decode > ./backend/.env
      - run:
          name: Import Frontend ENV
          command: echo "$FRONTEND_ENV" | base64 --decode > ./frontend/.env
      - run:
          name: DEBUG
          command: |
            cat ./backend/.env
            cat ./frontend/.env
            echo "$BRANCH_NAME_UPPERCASE"
            echo "$BACKEND_ENV"
      - restore_cache:
          name: Restore Yarn Package Cache
          keys:
            - ${CACHE_VERSION}-yarn-packages-{{ checksum "yarn.lock" }}-{{ checksum "./frontend/yarn.lock" }}-{{ checksum "./backend/yarn.lock" }}
      - run:
          name: Install Dependencies
          command: yarn install --frozen-lockfile
      - save_cache:
          name: Save Yarn Package Cache
          key: ${CACHE_VERSION}-yarn-packages-{{ checksum "yarn.lock" }}-{{ checksum "./frontend/yarn.lock" }}-{{ checksum "./backend/yarn.lock" }}
          paths:
            - ~/.cache/yarn
      - persist_to_workspace:
          root: .
          paths:
            - node_modules
            - backend/node_modules
            - frontend/node_modules
            - backend/.env
            - frontend/.env

  test-frontend:
    <<: *useNode
    steps:
      - checkout
      - attach_workspace:
          at: "$CIRCLE_WORKING_DIRECTORY"
      - run:
          name: Test Frontend
          command: cd frontend && yarn test
  build-frontend:
    <<: *useNode
    steps:
      - checkout
      - attach_workspace:
          at: "$CIRCLE_WORKING_DIRECTORY"
      - run:
          name: Build Frontend
          command: cd frontend && yarn build
      - persist_to_workspace:
          root: .
          paths:
            - frontend/build
  deploy-frontend:
    <<: *useFirebase
    steps:
      - checkout
      - attach_workspace:
          at: "$CIRCLE_WORKING_DIRECTORY"
      - run:
          name: Export .env vars
          command: |
            cd frontend
            export $(grep -v '^#' .env | xargs)
      - run:
          name: DEBUG
          command: pwd
      - run:
          name: Deploy Frontend
          command: firebase deploy --token "$FIREBASE_TOKEN"

  test-backend:
    <<: *useNode
    steps:
      - checkout
      - attach_workspace:
          at: "$CIRCLE_WORKING_DIRECTORY"
      - run:
          name: Test Backend
          command: cd backend && yarn test
  deploy-prisma:
    <<: *useNode
    steps:
      - checkout
      - attach_workspace:
          at: "$CIRCLE_WORKING_DIRECTORY"
      - run:
          name: Install prisma
          command: yarn global add prisma
      - run:
          name: Deploy prisma
          command: cd backend && yarn prisma:deploy
      - persist_to_workspace:
          root: .
          paths:
            - backend/generated
  deploy-backend:
    <<: *useGcloud
    steps:
      - checkout
      - attach_workspace:
          at: "$CIRCLE_WORKING_DIRECTORY"
      - run:
          name: Export .env vars
          command: |
            cd backend
            export $(grep -v '^#' .env | xargs)
      - run:
          name: Gcloud authenticate
          command: echo $GCLOUD_SERVICE_KEY | gcloud auth activate-service-account --key-file=-
      - run:
          name: Gcloud configuration
          command: |
            gcloud --quiet config set project ${GCLOUD_PROJECT_ID}
            gcloud --quiet config set compute/zone ${GCLOUD_COMPUTE_ZONE}
      - run:
          name: Deploy backend
          command: gcloud app deploy

onlyEnvBranches: &onlyEnvBranches
  filters:
    branches:
      only:
        - dev
        - preprod
        - prod

workflows:
  version: 2
  default:
    jobs:
      - install

      - test-frontend:
          requires:
            - install
      - build-frontend:
          requires:
            - install
      - deploy-frontend:
          <<: *onlyEnvBranches
          requires:
            - test-frontend
            - build-frontend

      - test-backend:
          requires:
            - install
      - deploy-prisma:
          <<: *onlyEnvBranches
          requires:
            - test-backend
      - deploy-backend:
          <<: *onlyEnvBranches
          requires:
            - deploy-prisma
